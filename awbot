#!/bin/bash

# Â© 2012 fsckd <fsckdaemon@gmail.com>

## Load config file ##

config=/etc/awbot.conf

# source config if exists and readable
[[ -f "$config" ]] && [[ -r "$config" ]] && source "$config"

## Arguments ##

# function to print unhelpful usage error and then exit
usage_error() { echo "error: incorrect usage, please see manual" >&2 ; exit 1 ; }

# loop over parameters
while (( "$#" ))
do
  # parse config options
  IFS='=' read option value <<<"$1"
  if grep -q @"$option"@ <<<"@server@port@nick@pass@ircname@ircuser@channel@"
  then
    [[ -z "$value" ]] && [[ "$option" != pass ]] && usage_error
    eval "$1" # set value
  else
    usage_error
  fi
  shift
done

## Verify Config ##

[[ -z "$ircuser" ]] && ircuser="$nick"
[[ -z "$server" ]]  ||
[[ -z "$port" ]]    ||
[[ -z "$nick" ]]    ||
#[[ -z "$pass" ]]    ||
[[ -z "$ircname" ]] ||
[[ -z "$channel" ]] &&
{ echo error: configuration is incomplete >&2 ; exit 1 ; }


## IRC Bot ##

# References:
# RFCs   - http://irchelp.org/irchelp/rfc/
# colors - http://cpansearch.perl.org/src/HINRIK/IRC-Utils-0.12/lib/IRC/Utils.pm
# and loads of experimenting and testing
# there are *a lot* of assumptions made

cacert=/etc/ssl/certs/ca-certificates.crt # cert file
capath=/etc/ssl/certs # path to ca files

logr() # the loggings function
{
  echo "$@"
}

ircwrite() # write each arg as a line to irc
{
  while (( "$#" ))
  do
    echo "$1" >&${irc[1]}
    #echo "$1" >> awbot.out.log # DEBUG
    shift
  done
}

enclose01() # remove surrounding \x01, useful for CTCP
{
  # $1 - strip | add - strip surrounding \x01 or add them
  # $2 - string to opperate on

  case $1 in
    strip) tr -d '\001' <<<"$2" # we are lazy
           ;;
      add) echo -e "\\x01$2\\x01" # doubly so
  esac
}

ircmsg() # decompose an IRC message
{
  # RFCs 1459 and 2812

  unset mprefix mname muser mhost mcmd mparam mtrailing

  local queue="$(tr -d '\r' <<<"$line")" # remainder of the line to "parse"
                                         # right now it's the whole line
                                         # minus any \r

  if [[ "$queue" =~ ^: ]]
  then
    # we has a prefex
    queue="${queue#:}" # remove leading :
    ircmsgbreak ' ' mprefix queue # extract prefix!

    # break up the prefix into name, user and host
    local pqueue="$mprefix" # prefix queue XD
    ircmsgbreak '!' mname pqueue # extract name
    [[ -n "$pqueue" ]] && ircmsgbreak '@' muser pqueue # extract user
    [[ -n "$pqueue" ]] && mhost="$pqueue" # extract host
  fi

  [[ -z "$queue" ]] && return # if queue is blank, we're finished here

  # get command
  ircmsgbreak ' ' mcmd queue

  # extract message parameters
  # RFC 2812 says up to 15 parameters
  local tmpstr=""
  mtrailing=false
  for i in `seq 0 14`
  do
    [[ -z "$queue" ]] && return # yup yup yup

    if [[ "$queue" =~ ^: ]]
    then
      # we has a tail (see RFC)
      mparam[$i]="${queue#:}" # remove leading :
      mtrailing=true
      return # we're done
    fi

    ircmsgbreak ' ' tmpstr queue
    mparam[$i]="$tmpstr"
  done
}

ircmsgbreak() # facilitate message decomposition
{
  # input:
  #  delimiter string - blank if none
  #  mhead - variable to store extracted value in
  #  mtail - contains the string to be "parsed", 
  #          on return it is the string minus the value
  # model as a queue, this function pops the head of a queue :)

  # copy the tail
  local mtail="$(eval echo \"\$$3\")"

  # handle suffix
  if [[ -n "$1" ]]
  then
    # if there is a suffix we split the head from the tail
    # there is no suffix in $mtail, then mhead is the last item in the queue
    if [[ "$mtail" =~ .*${1}.* ]]
    then
      # first pop the head :)
      local mhead="${mtail%%$1*}"
      # remove head and suffix from tail
      mtail="${mtail#$mhead$1}"
    else
      # no suffix, no more items to pop off
      mhead="$mtail"
      mtail=''
    fi
  fi

  # save values
  read $2 <<<"$mhead"
  read $3 <<<"$mtail"
}

coproc irc { socat - "OPENSSL:$server:$port",capath="$capath"; } 2>/dev/null

initstage=true   # start in initial stage
logging=false    # logging starts once in the channel
nicknum=0        # number to append to nick if nick is in use
nickbase="$nick" # base to derive alternative nicks from 

while read line
do
  #echo "$line" >> awbot.in.log # DEBUG

  ircmsg # deconstruct message

  if $initstage && [[ "$line" =~ ^: ]]
  then
    # connected to the server
    # first send password
    [[ -n "$pass" ]] && ircwrite "pass $pass"
    # from here on, ignore everything NickServ has to say
    # send nick and user commands
    ircwrite "nick $nick" "user $ircuser * * $ircname"
    # leave initial stage
    initstage=false
  elif [[ $mcmd == 433 ]]
  then
    # name is in use, choose another
    nicknum=$(( nicknum + 1 ))
    nick="$nickbase$nicknum"
    ircwrite "nick $nick"
  elif [[ $mcmd == 001 ]]
  then
    # we're free to act
    # why not join a channel? :)
    ircwrite "join $channel"
  elif [[ $mcmd == 366 ]]
  then
    # assuming that if end of nick list command received,
    # it is safe to log the channel
    # enable logging mode
    logging=true
    #ircwrite "notice $channel :$message" "part $channel" "quit"
    #break # done!
  elif [[ $mcmd == PING ]]
  then
    # must respond to PING
    if [[ ${#mparam[@]} == 1 ]] && $mtrailing
    then
      ircwrite "pong :${mparam[0]}" # was trailing
    else
      ircwrite "pong ${mparam[0]}"
    fi
  elif [[ $mcmd == PRIVMSG ]] && [[ "$(enclose01 strip "${mparam[1]}")" == VERSION ]]
  then
    # CTCP VERSION request
    ircwrite "notice $mname :$(enclose01 add "VERSION Arch Linux Women IRC bot")"
  elif $logging
  then
    # log messages
    if [[ "${mparam[0]}" == "$channel" ]] # channel messages
      case "${mcmd^^}" in
        PRIVMSG) # if being addressed by someone, respond
                 unset cnick cmsg creply
                 read cnick cmsg <<<"${mparam[1]}"
                 [[ "$cnick" =~ ^${nick}.?$ ]] &&
                 case "$cmsg" in
                      help) creply="The commands are help, about, site, license, and source." ;;
                   license) creply="AGPL https://www.gnu.org/licenses/agpl see also source" ;;
                    source) creply="https://github.com/archwomen/awbot-logr" ;;
                     about) creply="I assist the ops by logging this channel. The logs are deleted periodically and are not publicly viewable." ;;
                      site) creply="http://redmine.archwomen.org/projects/awbot" ;;
                      ping) creply="pony" ;;
                 esac
                 [[ -n "$creply" ]] && ircwrite "privmsg $channel :$mname: $creply" # not logging this
                 ;&
         NOTICE) ;&
           PART) logr "${mcmd^^} $mprefix ${mparam[1]}" ;;
           JOIN) logr "${mcmd^^} $mprefix" ;;
           KICK) logr "${mcmd^^} $mprefix ${mparam[1]} ${mparam[2]}" ;;
           MODE) logr "${mcmd^^} $mprefix ${mparam[@]:1:$(( ${#mparam[@]} - 1 ))}" ;;
      esac
    else # global messages
      case "${mcmd^^}" in
        QUIT) ;&
        NICK) logr "${mcmd^^} $mprefix ${mparam[0]}" ;;
      esac
    fi
  fi
  # no else because other messages are ignored atm
done <&${irc[0]}
